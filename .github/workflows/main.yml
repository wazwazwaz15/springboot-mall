#pipeline的名稱
name: Spring Boot CI Demo
#啟動條件 push pull_request的時候 啟動workflow
on: #Event: 觸發自動化工作流程的功能。GitHub Action 有豐富的觸情境，在符合的條件下即啟動工作
  push:
    branches: [ "master" ]
  pull_request:
     branches: [ "master" ]

#Jobs: Job 是在同一個 Runner 執行的一組 Step。預設情況下這些工作會平行執行，你也能設定循序執行，當其中一個 Job 失敗後，下一個 Job 不會執行
jobs:
  build-and-test: #job1
    runs-on: ubuntu-latest #Runner: 代理程式，負責執行自動化程式的伺服器，運作在 Ubuntu Linux、Microsoft Windows 和 macOS 上

    steps: # Step: 在 Job 內可以執行命令獨立工作，Step 可以是一個命令或一個 Action，同一個 Job 內允許所有 Action 共享資料
      - #Action: 獨立的執行內容，可以自行撰寫，也可以使用 GitHub 社群創作的 Action 來完成工作流程
        #{owner}/{repo}@{ref}
        #
        #範例如下
        #actions/heroku@main



      # Step 1：拉下原始碼
      - name: ✅ Checkout 原始碼
        uses: actions/checkout@v4

      # Step 2：安裝 Java 17
      - name: ✅ 設定 Java 環境
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'



      # Step 3：列印目前的 Java 版本
      - name: ✅ 確認 Java 版本
        run: java -version

      # Step 4：建構 Maven 專案
      - name: 🔨 Maven 建構
        run: mvn clean install -DskipTests=true

      # Step 5：執行單元測試
      - name: 🧪 單元測試
        run: mvn test

      # Step 6：上傳打包好的 JAR 成為 Artifact
      - name: 📦 上傳 Jar 檔
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: target/*.jar

      # Step 7：自定義環境變數 + echo
      - name: 🖨️ 顯示作者名稱
        run: echo "作者是 ${{ env.AUTHOR_NAME }}"
        env:
          AUTHOR_NAME: 伯威 林


